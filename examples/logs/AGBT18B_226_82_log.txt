 
 
#######################################################
 SCRIPT NUMBER 1, project:AGBT18B_226_82 
 226777 902 Luo Jing 12 Rob Taggart 2019-03-05 12:26:20 obs_aborted 
#######################################################
# NANOGrav timing astrid block, 2012/02 PBD
# Modified for GUPPI + VEGAS, 2018/03 KS

# IMPORTANT!  Edit this to pick which band you're observing#
band = '820'
#band = 'L'
#band = 'S'

# IMPORTANT!  Edit this to pick which session you're observing
# All sources in the catalog will be observed in order, with the 
# remaining session time divided evenly between them. To 
# restart a interrupted session, first edit the catalog and comment
# out sources that have already been observed today.
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_A.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_B.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_C.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_D.cat")
srcs = Catalog("/users/pdemores/sched/18B226_2018_session_E.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_F.cat")

#Use personal catalog file, rather than editing Paul's files:
#srcs = Catalog("/users/jswiggum/nanograv/18B226_2018_session_D.cat")

# IMPORTANT!  Edit here to set the session's start/stop times in UTC!
# NOTES:
#  - start time does not need to be edited if the script is stopped/restarted.
#    it will always use the current time when running 'for real'.
#  - don't use any leading 0's in the values here, (leading 0 is code for
#    octal).
from mx import DateTime
# Function args are year, month, day, hour (24 hr), min, sec (UTC)
sess_start_time = DateTime.DateTime(2019,3,5,12,0,0) # UTC
sess_stop_time = DateTime.DateTime(2019,3,5,18,15,0) # UTC

# Use fixed start time rather than current time.
fix = False

############## You should not need to edit below this line ###########

execfile("/users/pdemores/config/astrid_utils.py")
#execfile("/users/pdemores/config/astrid_cals.py")

if Now() != None and not fix:
    print "Using current time for session start"
    sess_start_time = Now()
sess_len = float(sess_stop_time - sess_start_time) / 3600.0
print "Session time remaining = %.1fh" % sess_len

nsrc = len(srcs.keys())
print "nsrc = %d" % (nsrc)
time_per_src = sess_len / float(nsrc) # hours
print "time_per_src = %.1f min" % (time_per_src * 60.0)
stop_time = {}
start_time = {}
i = 0
for s in srcs.keys():
    stop_time[s] = sess_start_time + float(i+1) * time_per_src / 24.0
    start_time[s] = sess_start_time + float(i) * time_per_src / 24.0
    i += 1
    print "  Src '%s' start:%s, stop:%s" % (s, start_time[s], stop_time[s])

# Config items common to all obs
config_common = """
obstype = 'Pulsar'
backend = 'VEGAS/GUPPI'
pol = 'Linear'
ifbw = 0
tint = 10.24e-6 # Note, not actually used in coherent fold modes
swtype = 'none'

swper = 0.04
swfreq = 0.0, 0.0
nwin = 1
deltafreq = 0
vlow = 0
vhigh = 0
g.vframe = 'topo'
vdef = 'Radio'
vegas.obstype = 'fold'
vegas.polnmode = 'full_stokes'
vegas.outbits = 8
guppi.datadisk = 'data1'
"""

# Config items common to L-band obs
config_Lband_common="""
receiver = 'Rcvr1_2'
restfreq = 1500.0
notchfilter = "Out"
bandwidth = 800
vegas.numchan = 512
vegas.scale = 1015
guppi.scale = 0.125
"""

# Config items common to 820 obs
config_820_common="""
receiver = 'Rcvr_800'
restfreq = 820.0
bandwidth = 200
vegas.numchan = 128
vegas.polnmode = 'full_stokes'
vegas.scale = 1015
guppi.scale = 0.125
"""

# Config items common to S-band obs
config_Sband_common="""
receiver = 'Rcvr2_3'
restfreq = 2000.0
bandwidth = 800
vegas.numchan = 512
vegas.scale = 1015
guppi.scale = 0.125
"""

# Config for cal mode
config_cal = """
vegas.obsmode = 'coherent_cal'
vegas.fold_dumptime = 10.0
vegas.fold_bins = 2048
swmode = 'tp'
noisecal = 'lo'
"""

# Config for psr fold mode.
# Note the '%s' for parfile that needs to be filled in when using this.
config_psr = """
vegas.obsmode = 'coherent_fold'
vegas.fold_dumptime = 10.0
vegas.fold_bins = 2048
vegas.fold_parfile = '%s'
swmode = 'tp_nocal'
noisecal = 'off'
"""

# Check observing band
if (band == '820'):
   config_common = config_common.replace("VEGAS/GUPPI","GUPPI")
   config_common = config_common.replace("vegas","guppi")
   config_820_common = config_820_common.replace("vegas.scale = 1015","")
   config_820_common = config_820_common.replace("vegas","guppi")
   config0 = config_common + config_820_common
   config_cal = config_cal.replace("vegas","guppi")
   config_psr = config_psr.replace("vegas","guppi")
elif (band== 'L'):
   config0 = config_common + config_Lband_common
elif (band=='S'):
   config0 = config_common + config_Sband_common
else:
    Break("Invalid band ('%s') selected!" % band)

# Figure out what source to start on
#if start_src == None:
start_src = None

if True:
    cur_time = Now()
    for s in srcs.keys():
        if (cur_time < stop_time[s]):
            start_src = s
            break

# Initial slew, config, balance
print config0
print "First source: %s" % start_src
Configure(config0 + config_cal)
SetValues("DCR",{"state":"prepare"})
Slew(start_src)
Balance()
if (band!='820'):
    Balance("VEGAS")
# Note: use these for 820 recvr 2013/05/19
#Balance("IFRack")
#Balance("GUPPI")
Break("Check GUPPI levels now.")

# 2013/06/06 - route to vegas bank A for Glenn's stuff
#SetValues("ConverterRack",{"CMInput,1":"A"})
#SetValues("ConverterRack",{"CMInput,5":"A"})
#if (band=='820'):
#    SetValues("ConverterRack",{"Gfrequency,1":11068})
#elif (band=='L'):
#    #SetValues("ConverterRack",{"Gfrequency,1":13088})
#    SetValues("ConverterRack",{"Gfrequency,1":13288})
#SetValues("ConverterRack",{"CMAttenuator1":22.0})
#SetValues("ConverterRack",{"CMAttenuator5":22.0})
#SetValues("ConverterRack",{"CMOutput,1":3})
#SetValues("ConverterRack",{"CMOutput,5":3})
#SetValues("ConverterRack",{"state":"prepare"})

# Main observing loop
first=1
for s in srcs.keys():
    if (first and s!=start_src):
        continue
    first=0;
    print "Starting '%s'" % s
    alias = "%4.4d" % srcs[s]["alias"]
    parfile = "/users/pdemores/tzpar/%s.par" % s
    print parfile
    Slew(s)
    print "############## HERE ##################"
    print config0+config_cal
    Configure(config0 + config_cal)
    SetValues("DCR",{"state":"prepare"})
    Balance("IFRack")
    # Regular PSR observing
    Track(s, None, 90.0) # Cal scan
    Configure(config0 + config_psr % parfile)
    Track(s, None, stopTime=stop_time[s])

#######################################################
 LOG SESSION NUMBER 1 
[12:26:21] ******** Begin Scheduling Block
[12:26:21] ******** observer = Luo Jing, SB name = nanograv_timing_vegas, project ID = AGBT18B_226, date = 05 Mar 2019

[12:26:21] Using current time for session start
[12:26:21] Session time remaining = 5.8h
[12:26:21] nsrc = 11
[12:26:21] time_per_src = 31.7 min
[12:26:21]   Src 'J0740+6620' start:2019-03-05 12:26:21.22, stop:2019-03-05 12:58:02.93
[12:26:21]   Src 'J1630+3734' start:2019-03-05 12:58:02.93, stop:2019-03-05 13:29:44.64
[12:26:21]   Src 'B1937+21' start:2019-03-05 13:29:44.64, stop:2019-03-05 14:01:26.34
[12:26:21]   Src 'J1751-2857' start:2019-03-05 14:01:26.34, stop:2019-03-05 14:33:08.05
[12:26:21]   Src 'J1802-2124' start:2019-03-05 14:33:08.05, stop:2019-03-05 15:04:49.76
[12:26:21]   Src 'J1811-2405' start:2019-03-05 15:04:49.76, stop:2019-03-05 15:36:31.46
[12:26:21]   Src 'J1843-1113' start:2019-03-05 15:36:31.46, stop:2019-03-05 16:08:13.17
[12:26:21]   Src 'J1832-0836' start:2019-03-05 16:08:13.17, stop:2019-03-05 16:39:54.88
[12:26:21]   Src 'J1918-0642' start:2019-03-05 16:39:54.88, stop:2019-03-05 17:11:36.59
[12:26:21]   Src 'J2039-3616' start:2019-03-05 17:11:36.59, stop:2019-03-05 17:43:18.29
[12:26:21]   Src 'J2124-3358' start:2019-03-05 17:43:18.29, stop:2019-03-05 18:15:00.00
[12:26:21] 
obstype = 'Pulsar'
backend = 'GUPPI'
pol = 'Linear'
ifbw = 0
tint = 10.24e-6 # Note, not actually used in coherent fold modes
swtype = 'none'

swper = 0.04
swfreq = 0.0, 0.0
nwin = 1
deltafreq = 0
vlow = 0
vhigh = 0
g.vframe = 'topo'
vdef = 'Radio'
guppi.obstype = 'fold'
guppi.polnmode = 'full_stokes'
guppi.outbits = 8
guppi.datadisk = 'data1'

receiver = 'Rcvr_800'
restfreq = 820.0
bandwidth = 200
guppi.numchan = 128
guppi.polnmode = 'full_stokes'

guppi.scale = 0.125

[12:26:21] First source: J0740+6620
[12:26:21] Configuring telescope.
[12:26:21]     Setting State: Activating
[12:26:31]     Setting State: Aborting
[12:26:31] 
[12:26:31] User queried: "Abort detected! Terminate block?" waiting for reply...
[12:26:33] User replied: "Yes".
[12:26:33]     Setting State: Ready
[12:26:33]     Setting State: Activating
[12:26:33] Exiting scheduling block.
runSuccessful: False
[12:26:33] ******** End Scheduling Block
[12:26:33] ******** observer = Luo Jing, SB name = nanograv_timing_vegas, project ID = AGBT18B_226

how much log? 2313 id: 226777self.history: <gbt.turtle.database.History.History instance at 0x605c8c0>self.history.connection: <gbt.turtle.database.TurtleConnection.TurtleConnection instance at 0x605c758>how much converted log? 2561 
#######################################################
 
 
#######################################################
 SCRIPT NUMBER 2, project:AGBT18B_226_82 
 226778 902 Luo Jing 12 Rob Taggart 2019-03-05 12:26:48 obs_aborted 
#######################################################
# NANOGrav timing astrid block, 2012/02 PBD
# Modified for GUPPI + VEGAS, 2018/03 KS

# IMPORTANT!  Edit this to pick which band you're observing#
band = '820'
#band = 'L'
#band = 'S'

# IMPORTANT!  Edit this to pick which session you're observing
# All sources in the catalog will be observed in order, with the 
# remaining session time divided evenly between them. To 
# restart a interrupted session, first edit the catalog and comment
# out sources that have already been observed today.
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_A.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_B.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_C.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_D.cat")
srcs = Catalog("/users/pdemores/sched/18B226_2018_session_E.cat")
#srcs = Catalog("/users/pdemores/sched/18B226_2018_session_F.cat")

#Use personal catalog file, rather than editing Paul's files:
#srcs = Catalog("/users/jswiggum/nanograv/18B226_2018_session_D.cat")

# IMPORTANT!  Edit here to set the session's start/stop times in UTC!
# NOTES:
#  - start time does not need to be edited if the script is stopped/restarted.
#    it will always use the current time when running 'for real'.
#  - don't use any leading 0's in the values here, (leading 0 is code for
#    octal).
from mx import DateTime
# Function args are year, month, day, hour (24 hr), min, sec (UTC)
sess_start_time = DateTime.DateTime(2019,3,5,12,0,0) # UTC
sess_stop_time = DateTime.DateTime(2019,3,5,18,15,0) # UTC

# Use fixed start time rather than current time.
fix = False

############## You should not need to edit below this line ###########

execfile("/users/pdemores/config/astrid_utils.py")
#execfile("/users/pdemores/config/astrid_cals.py")

if Now() != None and not fix:
    print "Using current time for session start"
    sess_start_time = Now()
sess_len = float(sess_stop_time - sess_start_time) / 3600.0
print "Session time remaining = %.1fh" % sess_len

nsrc = len(srcs.keys())
print "nsrc = %d" % (nsrc)
time_per_src = sess_len / float(nsrc) # hours
print "time_per_src = %.1f min" % (time_per_src * 60.0)
stop_time = {}
start_time = {}
i = 0
for s in srcs.keys():
    stop_time[s] = sess_start_time + float(i+1) * time_per_src / 24.0
    start_time[s] = sess_start_time + float(i) * time_per_src / 24.0
    i += 1
    print "  Src '%s' start:%s, stop:%s" % (s, start_time[s], stop_time[s])

# Config items common to all obs
config_common = """
obstype = 'Pulsar'
backend = 'VEGAS/GUPPI'
pol = 'Linear'
ifbw = 0
tint = 10.24e-6 # Note, not actually used in coherent fold modes
swtype = 'none'

swper = 0.04
swfreq = 0.0, 0.0
nwin = 1
deltafreq = 0
vlow = 0
vhigh = 0
g.vframe = 'topo'
vdef = 'Radio'
vegas.obstype = 'fold'
vegas.polnmode = 'full_stokes'
vegas.outbits = 8
guppi.datadisk = 'data1'
"""

# Config items common to L-band obs
config_Lband_common="""
receiver = 'Rcvr1_2'
restfreq = 1500.0
notchfilter = "Out"
bandwidth = 800
vegas.numchan = 512
vegas.scale = 1015
guppi.scale = 0.125
"""

# Config items common to 820 obs
config_820_common="""
receiver = 'Rcvr_800'
restfreq = 820.0
bandwidth = 200
vegas.numchan = 128
vegas.polnmode = 'full_stokes'
vegas.scale = 1015
guppi.scale = 0.125
"""

# Config items common to S-band obs
config_Sband_common="""
receiver = 'Rcvr2_3'
restfreq = 2000.0
bandwidth = 800
vegas.numchan = 512
vegas.scale = 1015
guppi.scale = 0.125
"""

# Config for cal mode
config_cal = """
vegas.obsmode = 'coherent_cal'
vegas.fold_dumptime = 10.0
vegas.fold_bins = 2048
swmode = 'tp'
noisecal = 'lo'
"""

# Config for psr fold mode.
# Note the '%s' for parfile that needs to be filled in when using this.
config_psr = """
vegas.obsmode = 'coherent_fold'
vegas.fold_dumptime = 10.0
vegas.fold_bins = 2048
vegas.fold_parfile = '%s'
swmode = 'tp_nocal'
noisecal = 'off'
"""

# Check observing band
if (band == '820'):
   config_common = config_common.replace("VEGAS/GUPPI","GUPPI")
   config_common = config_common.replace("vegas","guppi")
   config_820_common = config_820_common.replace("vegas.scale = 1015","")
   config_820_common = config_820_common.replace("vegas","guppi")
   config0 = config_common + config_820_common
   config_cal = config_cal.replace("vegas","guppi")
   config_psr = config_psr.replace("vegas","guppi")
elif (band== 'L'):
   config0 = config_common + config_Lband_common
elif (band=='S'):
   config0 = config_common + config_Sband_common
else:
    Break("Invalid band ('%s') selected!" % band)

# Figure out what source to start on
#if start_src == None:
start_src = None

if True:
    cur_time = Now()
    for s in srcs.keys():
        if (cur_time < stop_time[s]):
            start_src = s
            break

# Initial slew, config, balance
print config0
print "First source: %s" % start_src
Configure(config0 + config_cal)
SetValues("DCR",{"state":"prepare"})
Slew(start_src)
Balance()
if (band!='820'):
    Balance("VEGAS")
# Note: use these for 820 recvr 2013/05/19
#Balance("IFRack")
#Balance("GUPPI")
Break("Check GUPPI levels now.")

# 2013/06/06 - route to vegas bank A for Glenn's stuff
#SetValues("ConverterRack",{"CMInput,1":"A"})
#SetValues("ConverterRack",{"CMInput,5":"A"})
#if (band=='820'):
#    SetValues("ConverterRack",{"Gfrequency,1":11068})
#elif (band=='L'):
#    #SetValues("ConverterRack",{"Gfrequency,1":13088})
#    SetValues("ConverterRack",{"Gfrequency,1":13288})
#SetValues("ConverterRack",{"CMAttenuator1":22.0})
#SetValues("ConverterRack",{"CMAttenuator5":22.0})
#SetValues("ConverterRack",{"CMOutput,1":3})
#SetValues("ConverterRack",{"CMOutput,5":3})
#SetValues("ConverterRack",{"state":"prepare"})

# Main observing loop
first=1
for s in srcs.keys():
    if (first and s!=start_src):
        continue
    first=0;
    print "Starting '%s'" % s
    alias = "%4.4d" % srcs[s]["alias"]
    parfile = "/users/pdemores/tzpar/%s.par" % s
    print parfile
    Slew(s)
    print "############## HERE ##################"
    print config0+config_cal
    Configure(config0 + config_cal)
    SetValues("DCR",{"state":"prepare"})
    Balance("IFRack")
    # Regular PSR observing
    Track(s, None, 90.0) # Cal scan
    Configure(config0 + config_psr % parfile)
    Track(s, None, stopTime=stop_time[s])

#######################################################
 LOG SESSION NUMBER 2 
[12:26:49] ******** Begin Scheduling Block
[12:26:49] ******** observer = Luo Jing, SB name = nanograv_timing_vegas, project ID = AGBT18B_226, date = 05 Mar 2019

[12:26:49] Using current time for session start
[12:26:49] Session time remaining = 5.8h
[12:26:49] nsrc = 11
[12:26:49] time_per_src = 31.7 min
[12:26:49]   Src 'J0740+6620' start:2019-03-05 12:26:49.13, stop:2019-03-05 12:58:28.30
[12:26:49]   Src 'J1630+3734' start:2019-03-05 12:58:28.30, stop:2019-03-05 13:30:07.47
[12:26:49]   Src 'B1937+21' start:2019-03-05 13:30:07.47, stop:2019-03-05 14:01:46.64
[12:26:49]   Src 'J1751-2857' start:2019-03-05 14:01:46.64, stop:2019-03-05 14:33:25.81
[12:26:49]   Src 'J1802-2124' start:2019-03-05 14:33:25.81, stop:2019-03-05 15:05:04.98
[12:26:49]   Src 'J1811-2405' start:2019-03-05 15:05:04.98, stop:2019-03-05 15:36:44.15
[12:26:49]   Src 'J1843-1113' start:2019-03-05 15:36:44.15, stop:2019-03-05 16:08:23.32
[12:26:49]   Src 'J1832-0836' start:2019-03-05 16:08:23.32, stop:2019-03-05 16:40:02.49
[12:26:49]   Src 'J1918-0642' start:2019-03-05 16:40:02.49, stop:2019-03-05 17:11:41.66
[12:26:49]   Src 'J2039-3616' start:2019-03-05 17:11:41.66, stop:2019-03-05 17:43:20.83
[12:26:49]   Src 'J2124-3358' start:2019-03-05 17:43:20.83, stop:2019-03-05 18:15:00.00
[12:26:49] 
obstype = 'Pulsar'
backend = 'GUPPI'
pol = 'Linear'
ifbw = 0
tint = 10.24e-6 # Note, not actually used in coherent fold modes
swtype = 'none'

swper = 0.04
swfreq = 0.0, 0.0
nwin = 1
deltafreq = 0
vlow = 0
vhigh = 0
g.vframe = 'topo'
vdef = 'Radio'
guppi.obstype = 'fold'
guppi.polnmode = 'full_stokes'
guppi.outbits = 8
guppi.datadisk = 'data1'

receiver = 'Rcvr_800'
restfreq = 820.0
bandwidth = 200
guppi.numchan = 128
guppi.polnmode = 'full_stokes'

guppi.scale = 0.125

[12:26:49] First source: J0740+6620
[12:26:49] Configuring telescope.
[12:26:49]     Setting State: Activating
[12:27:11]     Setting State: Ready
[12:27:12]     Setting State: Activating
[12:27:13]     Setting State: Ready
[12:27:13] Default values are
[12:27:13] nchan  =  128
[12:27:13] beam  =  B1
[12:27:13] dm  =  0
[12:27:13] if3freq  =  [0]
[12:27:13] Configuring for backend GUPPI...
[12:27:13] The bad devices are: 
[12:27:13] ConverterFilter14
[12:27:13] ConverterFilter2
[12:27:13] ConverterFilter16
[12:27:13] ConverterFilter10
[12:27:13] ConverterFilter12
[12:27:13] Waiting for  ConverterRack to finish activating
[12:27:13] . . Waiting for  GUPPI to finish activating
[12:27:13] . . . . . . . . . . . . . . . . . . . .
[12:27:13] Checking telescope
[12:27:13] Configuration Complete
[12:27:14] source : J0740+6620
               alias : 740.0
               jname : J0740+6620
               location : J2000 @ (07:40:45.80, 66:20:33.60)
[12:27:14] Slewing to source.
[12:27:14] In state Ready, waiting for state Activating
[12:27:14]     Setting State: Activating
[12:27:14] Detected state Activating
[12:27:14] In state Activating, waiting for state Ready
[12:27:20]     Setting State: Ready
[12:27:20] Detected state Ready
[12:27:20] Balancing IF system.
[12:27:20] Balancing PF
[12:27:20]     Setting State: Activating
[12:27:22]     Setting State: Ready
[12:27:22]     Setting State: Activating
[12:27:24]     Setting State: Ready
[12:27:25]     Setting State: Activating
[12:27:26]     Setting State: Ready
[12:27:27]     Setting State: Activating
[12:27:28]     Setting State: Ready
[12:27:28]     Setting State: Activating
[12:27:28] Balancing IFRack
[12:27:29]     Setting State: Ready
[12:27:29]     Setting State: Activating
[12:27:29]     Setting State: Ready
[12:27:30] the sampler values are:
[12:27:30] RF_power 1 : 1.118164
[12:27:30] RF_power 2 : 0
[12:27:30] RF_power 3 : 9.995117
[12:27:30] RF_power 4 : 0.009765625
[12:27:30] RF_power 5 : 0.05371094
[12:27:30] RF_power 6 : 0.078125
[12:27:30] RF_power 7 : 0.004882812
[12:27:30] RF_power 8 : 0.078125
[12:27:30] Balancing Guppi
[12:27:30]     Setting State: Activating
[12:27:30]     Setting State: Ready
[12:27:30]     Setting State: Activating
[12:27:30]     Setting State: Ready
[12:27:30]     Setting State: Activating
[12:27:30]     Setting State: Ready
[12:27:31]     Setting State: Activating
[12:27:31]     Setting State: Ready
[12:27:32]     Setting State: Activating
[12:27:32]     Setting State: Ready
[12:27:33]     Setting State: Activating
[12:27:33]     Setting State: Ready
[12:27:34]     Setting State: Activating
[12:27:34]     Setting State: Ready
[12:27:35]     Setting State: Activating
[12:27:36]     Setting State: Ready
[12:27:37]     Setting State: Activating
[12:27:37]     Setting State: Ready
[12:27:38]     Setting State: Activating
[12:27:38]     Setting State: Ready
[12:27:39]     Setting State: Activating
[12:27:39]     Setting State: Ready
[12:27:40]     Setting State: Activating
[12:27:40]     Setting State: Ready
[12:27:41]     Setting State: Activating
[12:27:41]     Setting State: Ready
[12:27:42]     Setting State: Activating
[12:27:42]     Setting State: Ready
[12:27:43]     Setting State: Activating
[12:27:43]     Setting State: Ready
[12:27:44]     Setting State: Activating
[12:27:44]     Setting State: Ready
[12:27:45]     Setting State: Activating
[12:27:45]     Setting State: Ready
[12:27:47] Filter 8 RF power =
[12:27:47] 2.802734375
[12:27:47] Filter 4 RF power =
[12:27:47] 1.7919921875
[12:27:47]     Setting State: Activating
[12:27:47]     Setting State: Ready
[12:27:47]     Setting State: Activating
[12:27:47]     Setting State: Ready
[12:27:48] 
[12:27:48] User queried: "Check GUPPI levels now. - Continue scheduling block?" waiting for reply...
[12:28:07] User replied: "Yes".
[12:28:07] Starting 'J0740+6620'
[12:28:07] /users/pdemores/tzpar/J0740+6620.par
[12:28:07] source : J0740+6620
               alias : 740.0
               jname : J0740+6620
               location : J2000 @ (07:40:45.80, 66:20:33.60)
[12:28:07] Slewing to source.
[12:28:08] In state Ready, waiting for state Activating
[12:28:08]     Setting State: Activating
[12:28:08] Detected state Activating
[12:28:08] In state Activating, waiting for state Ready
[12:28:10]     Setting State: Ready
[12:28:10] Detected state Ready
[12:28:10] ############## HERE ##################
[12:28:10] 
obstype = 'Pulsar'
backend = 'GUPPI'
pol = 'Linear'
ifbw = 0
tint = 10.24e-6 # Note, not actually used in coherent fold modes
swtype = 'none'

swper = 0.04
swfreq = 0.0, 0.0
nwin = 1
deltafreq = 0
vlow = 0
vhigh = 0
g.vframe = 'topo'
vdef = 'Radio'
guppi.obstype = 'fold'
guppi.polnmode = 'full_stokes'
guppi.outbits = 8
guppi.datadisk = 'data1'

receiver = 'Rcvr_800'
restfreq = 820.0
bandwidth = 200
guppi.numchan = 128
guppi.polnmode = 'full_stokes'

guppi.scale = 0.125

guppi.obsmode = 'coherent_cal'
guppi.fold_dumptime = 10.0
guppi.fold_bins = 2048
swmode = 'tp'
noisecal = 'lo'

[12:28:10] Configuring telescope.
[12:28:10]     Setting State: Activating
[12:28:32]     Setting State: Ready
[12:28:33]     Setting State: Activating
[12:28:34]     Setting State: Ready
[12:28:34] Default values are
[12:28:34] nchan  =  128
[12:28:34] beam  =  B1
[12:28:34] dm  =  0
[12:28:34] if3freq  =  [0]
[12:28:34] Configuring for backend GUPPI...
[12:28:34] The bad devices are: 
[12:28:34] ConverterFilter14
[12:28:34] ConverterFilter2
[12:28:34] ConverterFilter16
[12:28:34] ConverterFilter10
[12:28:34] ConverterFilter12
[12:28:34] Waiting for  ConverterRack to finish activating
[12:28:34] . . Waiting for  GUPPI to finish activating
[12:28:34] . . . . . . . . . . . . . . . . . . . .
[12:28:34] Checking telescope
[12:28:34] Configuration Complete
[12:28:35] Balancing IF system.
[12:28:35] Balancing IFRack
[12:28:35]     Setting State: Activating
[12:28:37] the sampler values are:
[12:28:37] RF_power 1 : 1.12793
[12:28:37] RF_power 2 : 0
[12:28:37] RF_power 3 : 0.9667969
[12:28:37] RF_power 4 : 0.01464844
    Setting State: Ready[12:28:37] RF_power 5 :
 0.05859375
[12:28:37] RF_power 6 : 0.07324219
[12:28:37] RF_power 7 : 0.004882812
[12:28:37] RF_power 8 : 0.07324219
[12:28:38] source : J0740+6620
               alias : 740.0
               jname : J0740+6620
               location : J2000 @ (07:40:45.80, 66:20:33.60)
[12:28:38] Track: Subscan 1 of 1
[12:28:39] In state Ready, waiting for state Running
[12:28:39]     Setting State: Activating
[12:29:05]     Setting State: Committed
[12:29:07]     Setting State: Running
[12:29:07] Detected state Running
[12:29:07] *** Notice: This subscan will be numbered as scan #1 in your data reduction package.
[12:29:07] In state Running, waiting for state Ready
[12:30:37]     Setting State: Stopping
[12:30:39]     Setting State: Ready
[12:30:39] Detected state Ready
[12:30:39] Ygor Telescope: WaitForStopping
[12:30:39] Configuring telescope.
[12:30:39]     Setting State: Activating
[12:31:01]     Setting State: Ready
[12:31:02]     Setting State: Activating
[12:31:03]     Setting State: Ready
[12:31:03] Default values are
[12:31:03] nchan  =  128
[12:31:03] beam  =  B1
[12:31:03] dm  =  0
[12:31:03] if3freq  =  [0]
[12:31:03] Configuring for backend GUPPI...
[12:31:03] The bad devices are: 
[12:31:03] ConverterFilter14
[12:31:03] ConverterFilter2
[12:31:03] ConverterFilter16
[12:31:03] ConverterFilter10
[12:31:03] ConverterFilter12
[12:31:03] Waiting for  ConverterRack to finish activating
[12:31:03] . . Waiting for  GUPPI to finish activating
[12:31:03] . . . . . . . . . . . . . . . . . . . .
[12:31:03] Checking telescope
[12:31:03] Configuration Complete
[12:31:04] source : J0740+6620
               alias : 740.0
               jname : J0740+6620
               location : J2000 @ (07:40:45.80, 66:20:33.60)
[12:31:04] Track: Subscan 1 of 1
[12:31:04] In state Ready, waiting for state Running
[12:31:04]     Setting State: Activating
[12:31:10]     Setting State: Committed
[12:31:12]     Setting State: Running
[12:31:12] Detected state Running
[12:31:12] *** Notice: This subscan will be numbered as scan #2 in your data reduction package.
[12:31:12] In state Running, waiting for state Ready
[12:58:05]     Setting State: Aborting
[12:58:05] ygor.Telescope: WaitForRunning: Asking abort confirmation.
[12:58:05] 
[12:58:05] User queried: "Abort detected! Terminate block?" waiting for reply...
[12:58:06]     Setting State: Ready
[12:58:10] User replied: "Yes".
[12:58:10] Exiting scheduling block.
runSuccessful: False
[12:58:10] ******** End Scheduling Block
[12:58:10] ******** observer = Luo Jing, SB name = nanograv_timing_vegas, project ID = AGBT18B_226

how much log? 10428 id: 226778self.history: <gbt.turtle.database.History.History instance at 0x605c8c0>self.history.connection: <gbt.turtle.database.TurtleConnection.TurtleConnection instance at 0x605c758>how much converted log? 10707 
#######################################################
